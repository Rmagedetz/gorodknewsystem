import datetime

import pandas as pd
import streamlit as st
import sql
from sqlalchemy.orm import Session

from io import BytesIO
import openpyxl
from openpyxl import Workbook
from openpyxl.styles import Alignment, Font, Border, Side
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.utils import get_column_letter
from openpyxl.worksheet.page import PageMargins
from openpyxl.worksheet.pagebreak import Break
import copy

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
permission = st.session_state.user_permissions['editing_groups'][0]

# –°–µ–ª–µ–∫—Ç–æ—Ä—ã —Å–µ–∑–æ–Ω–æ–≤, —Ñ–∏–ª–∏–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø
left, center, right = st.columns(3)

# –°–µ–∑–æ–Ω—ã
seasons = sql.Seasons.get_df()['season_name']
with left:
    season_selector = st.selectbox('–°–µ–∑–æ–Ω', seasons, key='season_selector')

# –§–∏–ª–∏–∞–ª—ã
filials = sql.Filials.get_df(season_name=season_selector)['filial_name']
with center:
    filial_selector = st.selectbox('–§–∏–ª–∏–∞–ª', filials, key='filial_selector')

# –ì—Ä—É–ø–ø—ã
groups = sql.Groups.get_df(season_name=season_selector, filial_name=filial_selector)['group_name']
with right:
    group_selector = st.selectbox('–ì—Ä—É–ø–ø–∞', groups, key='group_selector')

group_data = sql.Groups.get_days_for_group_in_season(season_name=season_selector, group_name=group_selector)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---

parents_df = sql.Parent.get_df()
childrens_df = sql.Child.get_df()

records_df = sql.Records.get_df(
    season_name=season_selector,
    filial_name=filial_selector,
    group_name=group_selector
)

visits_df = sql.Visits.get_df(
    season_name=season_selector,
    filial_name=filial_selector,
    group_name=group_selector
)

payments_df = sql.Payments.get_df(
    season_name=season_selector,
    group_name=group_selector
)

ankets = sql.Ankets.get_df()
childs_in_group = records_df.merge(ankets, left_on='child_name', right_on='name', how='left')

column_config = {
    'child_name': st.column_config.Column('–§–ò–û',
                                          width='medium',
                                          help='–§–ò–û —Ä–µ–±–µ–Ω–∫–∞'),
    'child_birthday': st.column_config.DateColumn('–î–†',
                                                  format='DD.MM.YY',
                                                  help='–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
                                                  width='small'),
    'parent_main_name': st.column_config.Column('–§–ò–û –†',
                                                width='medium',
                                                help='–§–ò–û –†–æ–¥–∏—Ç–µ–ª—è'),
    'parent_main_phone': st.column_config.Column('–¢–µ–ª.',
                                                 width=130,
                                                 help='–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è'),
    'parent_add': st.column_config.Column('–§–ò–û –î–†',
                                          width='medium',
                                          help='–§–ò–û –¥—Ä—É–≥–æ–≥–æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞'),
    'phone_add': st.column_config.Column('–î–æ–±. —Ç–µ–ª.',
                                         width=130,
                                         help='–¢–µ–ª–µ—Ñ–æ–Ω –¥—Ä—É–≥–æ–≥–æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞'),
    'leave': st.column_config.Column('–£',
                                     width=40,
                                     help='–£—Ö–æ–¥–∏—Ç —Å–∞–º'),
    'addr': st.column_config.Column('–ê–¥—Ä.',
                                    width='medium',
                                    help='–ê–¥—Ä–µ—Å'),
    'oms': st.column_config.Column('–û–ú–°',
                                   width=125,
                                   help='–ü–æ–ª–∏—Å'),
    'disease': st.column_config.Column('–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏—è',
                                       width=125,
                                       help='–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏—è'),
    'allergy': st.column_config.Column('–ê–ª–ª–µ—Ä–≥–∏—è',
                                       width=125,
                                       help='–ê–ª–ª–µ—Ä–≥–∏—è'),
    'other': st.column_config.Column('–¢—Ä–∞–≤–º—ã',
                                     width=125,
                                     help='–¢—Ä–∞–≤–º—ã'),
    'physic': st.column_config.Column('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è',
                                      width=125,
                                      help='–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è'),
    'swimm': st.column_config.Column('–ë–∞—Å—Å–µ–Ω–π–Ω',
                                     width=125,
                                     help='–ë–∞—Å—Å–µ–Ω–π–Ω'),
    'jacket_swimm': st.column_config.Column('–ù–∞—Ä—É–∫–∞–≤–Ω–∏–∫–∏',
                                            width=125,
                                            help='–ù–∞—Ä—É–∫–∞–≤–Ω–∏–∫–∏'),
    'hobby': st.column_config.Column('–•–æ–±–±–∏',
                                     width='medium',
                                     help='–•–æ–±–±–∏'),
    'additional_info': st.column_config.Column('–î–æ–ø –¥–∞–Ω–Ω—ã–µ',
                                               width='medium',
                                               help='–î–æ–ø –¥–∞–Ω–Ω—ã–µ'),
    'additional_contact': st.column_config.Column('–î–æ–ø –∫–æ–Ω—Ç–∞–∫—Ç',
                                                  width='medium',
                                                  help='–ö—Ç–æ –∫—Ä–æ–º–µ —Ä–æ–¥–∏—Ç–µ–ª—è –∑–∞–±–∏—Ä–∞–µ—Ç —Ä–µ–±–µ–Ω–∫–∞')
}

# --- –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
if not records_df.empty:
    merged = records_df.merge(parents_df, on='parent_name', how='left', suffixes=('', '_p'))
    merged = merged.merge(childrens_df, on='child_name', how='left', suffixes=('', '_c'))

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—è
    for col in ['parent_name', 'parent_name_x', 'parent_name_y', 'parent_name_p']:
        if col in merged.columns:
            merged['parent_name'] = merged[col]
            break
    else:
        merged['parent_name'] = records_df.get('parent_name', '')

    # –í—ã–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    available_cols = [c for c in ['child_name', 'child_age', 'parent_name', 'parent_phone', 'record_status', 'comment']
                      if c in merged.columns]
    merged = merged[available_cols].copy()
    merged.fillna('', inplace=True)
else:
    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
    merged = pd.DataFrame(
        columns=['child_name', 'child_age', 'parent_name', 'parent_phone', 'record_status', 'comment'])

# --- –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ ---
for day in range(1, group_data + 1):
    merged[str(day)] = ' '  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ

# --- –ù–∞–ø–æ–ª–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è–º–∏ ---
if not visits_df.empty:
    for _, visit in visits_df.iterrows():
        mask = (merged['child_name'] == visit['child_name']) & (merged['parent_name'] == visit['parent_name'])
        if mask.any():
            day_col = str(visit['day_number'])
            merged.loc[mask, day_col] = visit.get('visit_status', '')

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ ---
columns_config = {
    'child_name': '–§–ò–û –†–µ–±–µ–Ω–∫–∞',
    'child_age': '–í–æ–∑—Ä–∞—Å—Ç',
    'parent_name': '–§–ò–û –†–æ–¥–∏—Ç–µ–ª—è',
    'parent_phone': '–¢–µ–ª. —Ä–æ–¥–∏—Ç–µ–ª—è',
    'record_status': '–û–ø–ª–∞—Ç–∞',
    'comment': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'
}

visit_options = [1, "1–î", "X", "–ù", "–ü", "–ë", "–í"]
for day in range(1, group_data + 1):
    columns_config[str(day)] = st.column_config.SelectboxColumn(str(day), options=visit_options)

(group_list_tab, visits_tab, childrens_tab, drive_tab,
 payments_tab, locker_list_tab, pool_list_tab, adress_tab) = st.tabs(
    ['–°–ø–∏—Å–æ–∫',
     '–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å',
     '–õ–∏—Å—Ç –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è',
     '–ü–æ–µ–∑–¥–∫–∞',
     '–û–ø–ª–∞—Ç—ã',
     '–°–ø–∏—Å–æ–∫ –Ω–∞ —à–∫–∞—Ñ—á–∏–∫–∏',
     '–ë–∞—Å—Å–µ–π–Ω',
     '–ê–¥—Ä–µ—Å–∞'])

with group_list_tab:
    show = childs_in_group[['child_name',
                            'child_birthday',
                            'parent_main_name',
                            'parent_main_phone',
                            'parent_add',
                            'phone_add',
                            'leave',
                            'addr',
                            'oms',
                            'disease',
                            'allergy',
                            'other',
                            'physic',
                            'swimm',
                            'jacket_swimm',
                            'hobby']]
    group_df = st.dataframe(show,
                            column_config=column_config,
                            hide_index=True)

with visits_tab:
    # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ ---
    show = st.data_editor(
        merged,
        column_config=columns_config,
        hide_index=True
    )


    # --- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è ---
    def is_valid_status(status: str) -> bool:
        status = str(status).strip()
        return bool(status) and not any(bad in status for bad in [' ', '–æ–≤', '–Ω–∞'])


    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ ---
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å"):
        session: Session = sql.SessionLocal()
        try:
            inserts = []
            for _, row in show.iterrows():
                parent_name = row.get('parent_name', '').strip()
                if not parent_name:
                    st.warning(f"‚õî –ü—Ä–æ–ø—É—â–µ–Ω parent_name —É {row.get('child_name')}")
                    continue

                for day in range(1, group_data + 1):
                    visit_status = str(row.get(str(day), '')).strip()
                    if not is_valid_status(visit_status):
                        continue
                    visit_status = visit_status[:20]

                    existing = (
                        session.query(sql.Visits)
                        .filter_by(
                            season_name=season_selector,
                            filial_name=filial_selector,
                            group_name=group_selector,
                            child_name=row['child_name'],
                            parent_name=parent_name,
                            day_number=day
                        )
                        .first()
                    )

                    if existing:
                        existing.visit_status = visit_status
                    else:
                        inserts.append(sql.Visits(
                            season_name=season_selector,
                            filial_name=filial_selector,
                            group_name=group_selector,
                            child_name=row['child_name'],
                            parent_name=parent_name,
                            day_number=day,
                            visit_status=visit_status
                        ))

            if inserts:
                session.bulk_save_objects(inserts)

            session.commit()
            st.success("‚úÖ –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            st.rerun()
        except Exception as e:
            session.rollback()
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        finally:
            session.close()

day_columns = [str(i) for i in range(1, group_data + 1)]


def count_visited(row):
    return sum(row[day] in ['1', '1–î', '–ù'] for day in day_columns)


with payments_tab:
    first_df = merged.copy()
    del first_df['child_age']
    del first_df['parent_phone']
    del first_df['record_status']
    del first_df['comment']

    first_df['days'] = first_df.apply(count_visited, axis=1)
    columns_config['days'] = '–û—Ç—Ö–æ–∂–µ–Ω–æ –¥–Ω–µ–π'

    pivot = payments_df.pivot_table(
        index=["child_name"],
        values="pay_sum",
        aggfunc="sum"
    ).reset_index()
    columns_config['pay_sum'] = "–û–ø–ª–∞—á–µ–Ω–æ"
    merged = first_df.merge(pivot, on='child_name', how='left')

    pivot_options = payments_df.pivot_table(
        index=["child_name"],
        values="option",
        aggfunc="first"
    ).reset_index()
    merged = merged.merge(pivot_options, on='child_name', how='left')
    columns_config['option'] = '–¢–∞—Ä–∏—Ñ'

    pivot_2 = payments_df.pivot_table(
        index=["child_name"],
        values="pay_form",
        aggfunc="first"
    ).reset_index()

    merged = merged.merge(pivot_2, on="child_name", how='left')
    pay_forms = list(sql.Payments_forms.get_df()['form'])
    columns_config['pay_form'] = st.column_config.SelectboxColumn('–¢–∏–ø –æ–ø–ª–∞—Ç—ã', options=pay_forms)

    try:
        merged['sum_to_debit'] = merged['pay_sum'] / group_data * merged['days']
    except:
        pass

    pay_forms_options = list(sql.Payments_forms.get_df()['form'])
    columns_config['sum_to_debit'] = '–°—É–º–º–∞ –∫ —Å–ø–∏—Å–∞–Ω–∏—é'

    merged['go'] = False
    columns_config['go'] = '–û—Ç–º–µ—Ç–∫–∞'

    show2 = st.data_editor(
        merged,
        column_config=columns_config,
        hide_index=True,
        key="sd"
    )

    if st.button('–ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–∞–Ω–∏—è'):
        first_step = show2[show2['go'] == True][['child_name', 'parent_name', 'pay_sum', 'pay_form', 'sum_to_debit']]
        for _, row in first_step.iterrows():
            sql.Debits.add_object(
                datetime=datetime.datetime.now(),
                account=st.session_state.user,
                season_name=season_selector,
                filial_name=filial_selector,
                group_name=group_selector,
                child_name=row['child_name'],
                parent_name=row['parent_name'],
                pay_sum=row['sum_to_debit'],
                pay_form=row['pay_form'],
                option='–ü—É—Ç–µ–≤–∫–∞',
                comment=''
            )
        st.rerun()

with childrens_tab:
    show = childs_in_group[['child_name',
                            'child_birthday',
                            'disease',
                            'allergy',
                            'physic',
                            'other',
                            'leave',
                            'jacket_swimm',
                            'additional_info',
                            'additional_contact']]
    df = st.dataframe(show, column_config=column_config, hide_index=True)


    def create_ds(df):
        output = BytesIO()

        border = Border(left=Side(style='thin'), right=Side(style='thin'),
                        top=Side(style='thin'), bottom=Side(style='thin'))

        wb = Workbook()
        wb.remove(wb.active)

        ws = wb.create_sheet("–õ–∏—Å—Ç –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è")

        # ws.column_dimensions["A"].width = 42

        num_rows = ws.max_row + 4

        row_num = 0
        for _, row in df.iterrows():
            cell = ws.cell(row=num_rows + row_num, column=1, value=row_num + 1)
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            cell = ws.cell(row=num_rows + row_num, column=2, value=row['child_name'])
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            try:
                cell = ws.cell(row=num_rows + row_num, column=3, value=row['child_birthday'].strftime('%d.%m.%Y'))
                cell.font = Font(name='TimesNewRoman', size=9)
                cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
                cell.border = border
            except:
                cell = ws.cell(row=num_rows + row_num, column=3, value="")
                cell.font = Font(name='TimesNewRoman', size=9)
                cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
                cell.border = border

            cell = ws.cell(row=num_rows + row_num, column=4, value=row['disease'])
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            cell = ws.cell(row=num_rows + row_num, column=5, value=row['allergy'])
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            cell = ws.cell(row=num_rows + row_num, column=6, value=row['other'])
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            cell = ws.cell(row=num_rows + row_num, column=7, value=row['physic'])
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            cell = ws.cell(row=num_rows + row_num, column=8, value=row['leave'])
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            cell = ws.cell(row=num_rows + row_num, column=9, value=row['jacket_swimm'])
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            cell = ws.cell(row=num_rows + row_num, column=10, value=row['additional_info'])
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            cell = ws.cell(row=num_rows + row_num, column=11, value=row['additional_contact'])
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            row_num += 1

        num_rows = ws.max_row + 2

        for counter in range(5):
            cell = ws.cell(row=num_rows + counter, column=1, value="–û–∑–Ω–∞–∫–æ–º–ª–µ–Ω/–∞ __________________  "
                                                                   "______________________/_____________/ ‚Äú____‚Äù ______ "
                                                                   "202__ –≥.")
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)

            ws.merge_cells(start_row=num_rows + counter, start_column=1, end_row=num_rows + counter, end_column=11)

        cell = ws.cell(row=1, column=1, value="–õ–∏—Å—Ç –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã –ø–æ —É—Ö–æ–¥—É –∏ –ø—Ä–∏—Å–º–æ—Ç—Ä—É –æ–± "
                                              "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö –∑–¥–æ—Ä–æ–≤—å—è –¥–µ—Ç–µ–π")
        cell.font = Font(name='TimesNewRoman', size=10, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border
        ws.merge_cells(start_row=1, start_column=1, end_row=1, end_column=11)

        dates = sql.Groups.get_start_end(season_selector, filial_selector, group_selector)
        cell = ws.cell(row=2, column=1,
                       value=f"–î–æ–≤–æ–∂—É –¥–æ –≤–∞—à–µ–≥–æ —Å–≤–µ–¥–µ–Ω–∏—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—å—è –¥–µ—Ç–µ–π –≥—Ä—É–ø–ø—ã {group_selector} "
                             f"–Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –∫–ª—É–±–µ –≤ –ø–µ—Ä–∏–æ–¥ —Å {dates['start_date'].strftime('%d.%m.%Y')} "
                             f"–≥. –ø–æ {dates['end_date'].strftime('%d.%m.%Y')} –≥.")
        cell.font = Font(name='TimesNewRoman', size=9)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border
        ws.merge_cells(start_row=2, start_column=1, end_row=2, end_column=11)
        ws.row_dimensions[2].height = 30

        cell = ws.cell(row=3, column=1,
                       value=f"–ï–≤–¥–æ–∫–∏–º–æ–≤–∞ –ï.–ë. ___________________")
        cell.font = Font(name='TimesNewRoman', size=9)
        cell.alignment = Alignment(horizontal="left", vertical="center", wrap_text=True)
        cell.border = border
        ws.merge_cells(start_row=3, start_column=1, end_row=3, end_column=11)

        cell = ws.cell(row=4, column=1, value=f"‚Ññ")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=4, column=2, value=f"–§–ò–û —Ä–µ–±–µ–Ω–∫–∞")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=4, column=3, value=f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=4, column=4, value=f"–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏—è")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=4, column=5, value=f"–ê–ª–ª–µ—Ä–≥–∏—è")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=4, column=6, value=f"–¢—Ä–∞–≤–º—ã")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=4, column=7, value=f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=4, column=8, value=f"–£—Ö–æ–¥–∏—Ç —Å–∞–º")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=4, column=9, value=f"–ù–∞—Ä—É–∫–∞–≤–Ω–∏–∫–∏")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=4, column=10, value=f"–î–æ–ø. –¥–∞–Ω–Ω—ã–µ")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=4, column=11, value=f"–ö—Ç–æ –∫—Ä–æ–º–µ —Ä–æ–¥–∏—Ç–µ–ª—è –∑–∞–±–∏—Ä–∞–µ—Ç —Ä–µ–±–µ–Ω–∫–∞?")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        ws.column_dimensions["A"].width = 3
        ws.column_dimensions["B"].width = 17
        ws.column_dimensions["C"].width = 9
        ws.column_dimensions["D"].width = 10

        ws.column_dimensions["E"].width = 9
        ws.column_dimensions["F"].width = 9
        ws.column_dimensions["G"].width = 9
        ws.column_dimensions["H"].width = 9
        ws.column_dimensions["I"].width = 9

        ws.column_dimensions["J"].width = 15
        ws.column_dimensions["K"].width = 15

        page_setup = ws.page_setup
        page_setup.orientation = ws.ORIENTATION_LANDSCAPE

        wb.save(output)
        output.seek(0)
        return output


    if st.button("–°–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫", key="download_list"):
        excel_file = create_ds(show)
        st.download_button(
            label="–ù–∞–∂–º–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞",
            data=excel_file,
            file_name=f"–õ–∏—Å—Ç –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è_{group_selector}_{filial_selector}_{season_selector}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

with drive_tab:
    col1, col2 = st.columns(2)
    with col1:
        drive_day = st.date_input('–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏', format='DD.MM.YYYY')
    with col2:
        drive_adr = st.text_input('–ê–¥—Ä–µ—Å –ø–æ–µ–∑–¥–∫–∏')
    show = childs_in_group[['child_name',
                            'child_birthday',
                            'parent_name',
                            'parent_main_phone']]
    df = st.dataframe(show, column_config=column_config, hide_index=True)


    def create_drive_list(df):
        output = BytesIO()

        border = Border(left=Side(style='thin'), right=Side(style='thin'),
                        top=Side(style='thin'), bottom=Side(style='thin'))

        wb = Workbook()
        wb.remove(wb.active)

        ws = wb.create_sheet("–ü–æ–µ–∑–¥–∫–∞")

        num_rows = ws.max_row + 4

        row_num = 0
        for _, row in df.iterrows():
            cell = ws.cell(row=num_rows + row_num, column=1, value=row_num + 1)
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            cell = ws.cell(row=num_rows + row_num, column=2, value=row['child_name'])
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            try:
                cell = ws.cell(row=num_rows + row_num, column=3, value=row['child_birthday'].strftime('%d.%m.%Y'))
                cell.font = Font(name='TimesNewRoman', size=9)
                cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
                cell.border = border
            except:
                cell = ws.cell(row=num_rows + row_num, column=3, value="")
                cell.font = Font(name='TimesNewRoman', size=9)
                cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
                cell.border = border

            cell = ws.cell(row=num_rows + row_num, column=4, value=row['parent_name'])
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            cell = ws.cell(row=num_rows + row_num, column=5, value=row['parent_main_phone'])
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            row_num += 1

        num_rows = ws.max_row + 1

        cell = ws.cell(row=num_rows, column=1, value="–°–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–µ")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border
        ws.merge_cells(start_row=num_rows, start_column=1, end_row=num_rows, end_column=5)

        num_rows = ws.max_row + 1
        cell = ws.cell(row=num_rows, column=1, value="–§–ò–û —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.border = border
        ws.merge_cells(start_row=num_rows, start_column=1, end_row=num_rows, end_column=2)

        cell = ws.cell(row=num_rows, column=3, value="–î–æ–ª–∂–Ω–æ—Å—Ç—å")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.border = border

        cell = ws.cell(row=num_rows, column=4, value="–¢–µ–ª–µ—Ñ–æ–Ω")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.border = border
        ws.merge_cells(start_row=num_rows, start_column=4, end_row=num_rows, end_column=5)

        num_rows = ws.max_row + 1

        for counter in range(3):
            cell = ws.cell(row=num_rows + counter, column=1, value="_")
            cell.font = Font(name='TimesNewRoman', size=9, bold=True)
            cell.border = border
            ws.merge_cells(start_row=num_rows + counter, start_column=1, end_row=num_rows + counter, end_column=2)

            cell = ws.cell(row=num_rows + counter, column=3, value="_")
            cell.font = Font(name='TimesNewRoman', size=9, bold=True)
            cell.border = border

            cell = ws.cell(row=num_rows + counter, column=4, value="_")
            cell.font = Font(name='TimesNewRoman', size=9, bold=True)
            cell.border = border
            ws.merge_cells(start_row=num_rows + counter, start_column=4, end_row=num_rows + counter, end_column=5)

            ws.row_dimensions[num_rows + counter].height = 30

        num_rows = ws.max_row + 2

        cell = ws.cell(row=num_rows, column=1, value="–ò–ü –ï–≤–¥–æ–∫–∏–º–æ–≤–∞ –ï.–ë. __________________________")
        cell.font = Font(name='TimesNewRoman', size=9)

        num_rows = ws.max_row + 2

        cell = ws.cell(row=num_rows, column=1, value="–ü–æ–¥–ø–∏—Å—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ   "
                                                     "______________/___________________________")
        cell.font = Font(name='TimesNewRoman', size=9)

        cell = ws.cell(row=1, column=1, value="–°–ø–∏—Å–æ–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è (–ø–æ–º–∏–º–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π) –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ "
                                              "–∞–≤—Ç–æ–±—É—Å–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏")
        ws.row_dimensions[1].height = 30
        cell.alignment = Alignment(horizontal="center", vertical="top", wrap_text=True)
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        ws.merge_cells(start_row=1, start_column=1, end_row=1, end_column=5)

        cell = ws.cell(row=2, column=1, value=f"–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏: {drive_day.strftime('%d.%m.%Y')}")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        ws.merge_cells(start_row=2, start_column=1, end_row=2, end_column=2)

        cell = ws.cell(row=2, column=3, value=f"–ê–¥—Ä–µ—Å: {drive_adr}")
        ws.merge_cells(start_row=2, start_column=3, end_row=2, end_column=5)
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)

        cell = ws.cell(row=4, column=1, value=f"‚Ññ")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=4, column=2, value=f"–§–ò–û –ø–∞—Å—Å–∞–∂–∏—Ä–∞")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=4, column=3, value=f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=4, column=4, value=f"–§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=4, column=5, value=f"–¢–µ–ª–µ—Ñ–æ–Ω")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        ws.column_dimensions["A"].width = 3
        ws.column_dimensions["B"].width = 20
        ws.column_dimensions["C"].width = 20
        ws.column_dimensions["D"].width = 20
        ws.column_dimensions["E"].width = 20

        wb.save(output)
        output.seek(0)
        return output


    if st.button("–°–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫", key="download_drive"):
        excel_file = create_drive_list(show)
        st.download_button(
            label="–ù–∞–∂–º–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞",
            data=excel_file,
            file_name=f"–ü–æ–µ–∑–¥–∫–∞_{drive_day}_{group_selector}_{filial_selector}_{season_selector}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

with locker_list_tab:
    children = list(childs_in_group['child_name'])
    show = st.data_editor(children, hide_index=True, column_config={'value': '–§–ò–û —Ä–µ–±–µ–Ω–∫–∞'})


    def create_locker_list(chld_lst):
        output = BytesIO()

        border = Border(left=Side(style='thin'), right=Side(style='thin'),
                        top=Side(style='thin'), bottom=Side(style='thin'))

        wb = Workbook()
        wb.remove(wb.active)

        ws = wb.create_sheet("–®–∫–∞—Ñ—á–∏–∫–∏")

        num_rows = 1

        row_num = 0
        for name in chld_lst:
            cell = ws.cell(row=num_rows + row_num, column=1, value=name)
            cell.font = Font(name='TimesNewRoman', size=30)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border
            ws.row_dimensions[num_rows + row_num].height = 70

            row_num += 1

        ws.column_dimensions["A"].width = 60

        wb.save(output)
        output.seek(0)
        return output


    if st.button("–°–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫", key="download_lockers"):
        excel_file = create_locker_list(children)
        st.download_button(
            label="–ù–∞–∂–º–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞",
            data=excel_file,
            file_name=f"–®–∫–∞—Ñ—á–∏–∫–∏_{group_selector}_{filial_selector}_{season_selector}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

with pool_list_tab:
    show = childs_in_group[['child_name',
                            'parent_main_phone',
                            'physic',
                            'swimm',
                            'jacket_swimm']]
    df = st.dataframe(show, column_config=column_config, hide_index=True)


    def create_pool_list(df):
        output = BytesIO()

        border = Border(left=Side(style='thin'), right=Side(style='thin'),
                        top=Side(style='thin'), bottom=Side(style='thin'))

        wb = Workbook()
        wb.remove(wb.active)

        ws = wb.create_sheet("–ë–∞—Å—Å–µ–π–Ω")

        num_rows = ws.max_row + 2

        row_num = 0
        for _, row in df.iterrows():
            cell = ws.cell(row=num_rows + row_num, column=1, value=row_num + 1)
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            cell = ws.cell(row=num_rows + row_num, column=2, value=row['child_name'])
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            cell = ws.cell(row=num_rows + row_num, column=3, value=row['parent_main_phone'])
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            cell = ws.cell(row=num_rows + row_num, column=4, value=row['physic'])
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            cell = ws.cell(row=num_rows + row_num, column=5, value=row['swimm'])
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            cell = ws.cell(row=num_rows + row_num, column=6, value=row['jacket_swimm'])
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            row_num += 1

        num_rows = ws.max_row + 1

        for counter in range(3):
            cell = ws.cell(row=num_rows + counter, column=2,
                           value="–û–∑–Ω–∞–∫–æ–º–ª–µ–Ω/–∞ __________________  ______________________/_____________/ ‚Äú____‚Äù "
                                 "______ 202__ –≥.")
            cell.font = Font(name='TimesNewRoman', size=9, bold=True)
            ws.merge_cells(start_row=num_rows + counter, start_column=2, end_row=num_rows + counter, end_column=6)

            ws.row_dimensions[num_rows + counter].height = 30

        num_rows = ws.max_row + 2

        cell = ws.cell(row=2, column=1, value=f"‚Ññ")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=2, column=2, value=f"–§–ò–û –†–µ–±–µ–Ω–∫–∞")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=2, column=3, value=f"–¢–µ–ª–µ—Ñ–æ–Ω")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=2, column=4, value=f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=2, column=5, value=f"–ë–∞—Å—Å–µ–π–Ω")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=2, column=6, value=f"–ù–∞—Ä—É–∫–∞–≤–Ω–∏–∫–∏")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=1, column=1, value=f"–õ–∏—Å—Ç –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è –±–∞—Å—Å–µ–π–Ω–∞ –≥—Ä—É–ø–ø–∞ {group_selector}")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border
        ws.merge_cells(start_row=1, start_column=1, end_row=1, end_column=6)

        ws.column_dimensions["A"].width = 3
        ws.column_dimensions["B"].width = 20
        ws.column_dimensions["C"].width = 15
        ws.column_dimensions["D"].width = 15
        ws.column_dimensions["E"].width = 15
        ws.column_dimensions["F"].width = 15

        wb.save(output)
        output.seek(0)
        return output


    if st.button("–°–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫", key="download_pool"):
        excel_file = create_pool_list(show)
        st.download_button(
            label="–ù–∞–∂–º–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞",
            data=excel_file,
            file_name=f"–ë–∞—Å—Å–µ–π–Ω_{group_selector}_{filial_selector}_{season_selector}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

with adress_tab:
    show = childs_in_group[['child_name',
                            'addr',
                            'parent_main_phone',
                            'parent_main_name']]
    df = st.dataframe(show, column_config=column_config, hide_index=True)


    def create_addr_list(df):
        output = BytesIO()

        border = Border(left=Side(style='thin'), right=Side(style='thin'),
                        top=Side(style='thin'), bottom=Side(style='thin'))

        wb = Workbook()
        wb.remove(wb.active)

        ws = wb.create_sheet("–ê–¥—Ä–µ—Å–∞")

        num_rows = ws.max_row + 2

        row_num = 0
        for _, row in df.iterrows():
            cell = ws.cell(row=num_rows + row_num, column=1, value=row_num + 1)
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            cell = ws.cell(row=num_rows + row_num, column=2, value=row['child_name'])
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            cell = ws.cell(row=num_rows + row_num, column=3, value=row['addr'])
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            cell = ws.cell(row=num_rows + row_num, column=4, value=row['parent_main_phone'])
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border

            cell = ws.cell(row=num_rows + row_num, column=5, value=row['parent_main_name'])
            cell.font = Font(name='TimesNewRoman', size=9)
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border
            row_num += 1

        num_rows = ws.max_row + 1

        cell = ws.cell(row=2, column=1, value=f"‚Ññ")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=2, column=2, value=f"–§–ò–û –†–µ–±–µ–Ω–∫–∞")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=2, column=3, value=f"–ê–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=2, column=4, value=f"–¢–µ–ª–µ—Ñ–æ–Ω")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=2, column=5, value=f"–§–ò–û –†–æ–¥–∏—Ç–µ–ª—è")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border

        cell = ws.cell(row=1, column=1, value=f"–ê–¥—Ä–µ—Å–∞ –≥—Ä—É–ø–ø–∞ {group_selector}")
        cell.font = Font(name='TimesNewRoman', size=9, bold=True)
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border
        ws.merge_cells(start_row=1, start_column=1, end_row=1, end_column=5)

        ws.column_dimensions["A"].width = 3
        ws.column_dimensions["B"].width = 20
        ws.column_dimensions["C"].width = 15
        ws.column_dimensions["D"].width = 15
        ws.column_dimensions["E"].width = 15

        wb.save(output)
        output.seek(0)
        return output


    if st.button("–°–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫", key="download_addr"):
        excel_file = create_addr_list(show)
        st.download_button(
            label="–ù–∞–∂–º–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞",
            data=excel_file,
            file_name=f"–ê–¥—Ä–µ—Å–∞_{group_selector}_{filial_selector}_{season_selector}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
